{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "block_max_gas",
    "proxy_code_id"
  ],
  "properties": {
    "block_max_gas": {
      "description": "The max gas allowed in a single block.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "contract_addr_len": {
      "description": "The contract address length used by the chain. Defaults to 32. Some chains use other lengths, such as Injective which uses 20.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint8",
      "minimum": 0.0
    },
    "proxy_code_id": {
      "description": "Code ID to use for instantiating proxy contracts.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use secret_cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
