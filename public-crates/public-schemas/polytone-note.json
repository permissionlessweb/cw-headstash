{
  "contract_name": "polytone-note",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "block_max_gas",
      "headstash_params"
    ],
    "properties": {
      "block_max_gas": {
        "description": "The max gas allowed in a transaction. When returning callbacks the module will use this to calculate the amount of gas to save for handling a callback error. This protects from callbacks that run out of gas preventing ACKs or timeouts from being returned.\n\nThe contract admin can update with `MigrateMsg::WithUpdate`.",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "headstash_params": {
        "$ref": "#/definitions/HeadstashParams"
      },
      "pair": {
        "description": "This contract pairs with the first voice module that a relayer connects it with, or the pair specified here. Once it has a pair, it will never handshake with a different voice module, even after channel closure. This ensures that there will only ever be one voice for every note.",
        "anyOf": [
          {
            "$ref": "#/definitions/Pair"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "BloomConfig": {
        "type": "object",
        "required": [
          "default_cadance",
          "max_granularity",
          "min_cadance"
        ],
        "properties": {
          "default_cadance": {
            "description": "minimum cadance before messages are eligible to be added to mempool (in blocks)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "max_granularity": {
            "description": "maximum number of transactions a bloom msg will process",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "min_cadance": {
            "description": "minimum cadance that can be set before messages are eligible for mempool. if 0, default_cadance is set.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "HeadstashInitConfig": {
        "type": "object",
        "required": [
          "claim_msg_plaintxt",
          "random_key"
        ],
        "properties": {
          "claim_msg_plaintxt": {
            "type": "string"
          },
          "end_date": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "random_key": {
            "type": "string"
          },
          "start_date": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "HeadstashParams": {
        "description": "Params for Headstash",
        "type": "object",
        "required": [
          "cw_glob",
          "headstash_init_config",
          "multiplier",
          "snip120u_code_hash",
          "snip120u_code_id",
          "token_params"
        ],
        "properties": {
          "bloom_config": {
            "description": "bloom config",
            "anyOf": [
              {
                "$ref": "#/definitions/BloomConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "cw_glob": {
            "description": "The contract addr for cw-glob on the native chain.",
            "allOf": [
              {
                "$ref": "#/definitions/Addr"
              }
            ]
          },
          "fee_granter": {
            "description": "The wallet address able to create feegrant authorizations on behalf of this contract",
            "type": [
              "string",
              "null"
            ]
          },
          "headstash_addr": {
            "description": "Headstash contract address this contract is admin of. We save this address in the first callback msg sent during setup_headstash, and then use it to set as admin for snip120u of assets after 1st callback.",
            "type": [
              "string",
              "null"
            ]
          },
          "headstash_code_id": {
            "description": "Code id of Headstash contract on Secret Network",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "headstash_init_config": {
            "$ref": "#/definitions/HeadstashInitConfig"
          },
          "multiplier": {
            "description": "Enables reward multiplier for cw-headstash",
            "type": "boolean"
          },
          "snip120u_code_hash": {
            "description": "The code hash of the snip120u contract, on Secret Network. Not optional for pre-deployment verification",
            "type": "string"
          },
          "snip120u_code_id": {
            "description": "The code ID of the snip120u contract, on Secret Network.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "token_params": {
            "description": "Params defined by deployer for tokens included.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/HeadstashTokenParams"
            }
          }
        },
        "additionalProperties": false
      },
      "HeadstashTokenParams": {
        "description": "Params for Headstash Tokens",
        "type": "object",
        "required": [
          "ibc",
          "name",
          "native",
          "source_channel",
          "symbol",
          "total"
        ],
        "properties": {
          "ibc": {
            "description": "ibc string on Secret",
            "type": "string"
          },
          "name": {
            "description": "Name to use in snip120u state",
            "type": "string"
          },
          "native": {
            "description": "native token name",
            "type": "string"
          },
          "snip_addr": {
            "description": "snip20 addr on Secret",
            "type": [
              "string",
              "null"
            ]
          },
          "source_channel": {
            "description": "canonical source channel of token for transfers from source to secret network",
            "type": "string"
          },
          "symbol": {
            "description": "Symbol to use",
            "type": "string"
          },
          "total": {
            "description": "Total amount for specific snip",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Pair": {
        "description": "This contract's voice. There is one voice per note, and many notes per voice.",
        "type": "object",
        "required": [
          "connection_id",
          "remote_port"
        ],
        "properties": {
          "connection_id": {
            "type": "string"
          },
          "remote_port": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Performs the requested queries on the voice chain and returns a callback of Vec<QuerierResult>, or ACK-FAIL if unmarshalling any of the query requests fails.",
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "object",
            "required": [
              "callback",
              "msgs",
              "timeout_seconds"
            ],
            "properties": {
              "callback": {
                "$ref": "#/definitions/CallbackRequest"
              },
              "msgs": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/QueryRequest_for_Empty"
                }
              },
              "timeout_seconds": {
                "$ref": "#/definitions/Uint64"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Executes the requested messages on the voice chain on behalf of the note chain sender. Message receivers can return data in their callbacks by calling `set_data` on their `Response` object. Optionally, returns a callback of `Vec<Callback>` where index `i` corresponds to the callback for `msgs[i]`.\n\nAccounts are created on the voice chain after the first call to execute by the local address. To create an account, but perform no additional actions, pass an empty list to `msgs`. Accounts are queryable via the `RemoteAddress { local_address }` query after they have been created.",
        "type": "object",
        "required": [
          "execute"
        ],
        "properties": {
          "execute": {
            "type": "object",
            "required": [
              "headstash_msg",
              "timeout_seconds"
            ],
            "properties": {
              "callback": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CallbackRequest"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "headstash_msg": {
                "$ref": "#/definitions/HeadstashNote"
              },
              "timeout_seconds": {
                "$ref": "#/definitions/Uint64"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Entrypoint for Headstash callbacks from actions on the voice chain on behalf of the headstash-note chain sender.",
        "type": "object",
        "required": [
          "headstash_call_back"
        ],
        "properties": {
          "headstash_call_back": {
            "$ref": "#/definitions/HeadstashCallback"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackMessage"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Attribute": {
        "description": "An key value pair that is used in the context of event attributes in logs",
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BankMsg": {
        "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "send"
            ],
            "properties": {
              "send": {
                "type": "object",
                "required": [
                  "amount",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "to_address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
            "type": "object",
            "required": [
              "burn"
            ],
            "properties": {
              "burn": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "BankQuery": {
        "oneOf": [
          {
            "description": "This calls into the native bank module for querying the total supply of one denomination. It does the same as the SupplyOf call in Cosmos SDK's RPC API. Return value is of type SupplyResponse.",
            "type": "object",
            "required": [
              "supply"
            ],
            "properties": {
              "supply": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This calls into the native bank module for one denomination Return value is BalanceResponse",
            "type": "object",
            "required": [
              "balance"
            ],
            "properties": {
              "balance": {
                "type": "object",
                "required": [
                  "address",
                  "denom"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This calls into the native bank module for all denominations. Note that this may be much more expensive than Balance and should be avoided if possible. Return value is AllBalanceResponse.",
            "deprecated": true,
            "type": "object",
            "required": [
              "all_balances"
            ],
            "properties": {
              "all_balances": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This calls into the native bank module for querying metadata for a specific bank token. Return value is DenomMetadataResponse",
            "type": "object",
            "required": [
              "denom_metadata"
            ],
            "properties": {
              "denom_metadata": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This calls into the native bank module for querying metadata for all bank tokens that have a metadata entry. Return value is AllDenomMetadataResponse",
            "type": "object",
            "required": [
              "all_denom_metadata"
            ],
            "properties": {
              "all_denom_metadata": {
                "type": "object",
                "properties": {
                  "pagination": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/PageRequest"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Callback": {
        "oneOf": [
          {
            "description": "Result of executing the requested query, or an error.\n\nresult[i] corresponds to the i'th query and contains the base64 encoded query response.",
            "type": "object",
            "required": [
              "query"
            ],
            "properties": {
              "query": {
                "$ref": "#/definitions/Result_of_Array_of_Binary_or_ErrorResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Result of executing the requested messages, or an error.\n\n14/04/23: if a submessage errors the reply handler can see `codespace: wasm, code: 5`, but not the actual error. as a result, we can't return good errors for Execution and this error string will only tell you the error's codespace. for example, an out-of-gas error is code 11 and looks like `codespace: sdk, code: 11`.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "$ref": "#/definitions/Result_of_ExecutionResponse_or_String"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An error occured that could not be recovered from. The only known way that this can occur is message handling running out of gas, in which case the error will be `codespace: sdk, code: 11`.\n\nThis error is not named becuase it could also occur due to a panic or unhandled error during message processing. We don't expect this to happen and have carefully written the code to avoid it.",
            "type": "object",
            "required": [
              "fatal_error"
            ],
            "properties": {
              "fatal_error": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CallbackMessage": {
        "description": "Executed on the callback receiver upon message completion. When being executed, the message will be tagged with \"callback\":\n\n```json {\"callback\": { \"initiator\": ..., \"initiator_msg\": ..., \"result\": ..., }} ```",
        "type": "object",
        "required": [
          "initiator",
          "initiator_msg",
          "result"
        ],
        "properties": {
          "initiator": {
            "description": "Initaitor on the note chain.",
            "allOf": [
              {
                "$ref": "#/definitions/Addr"
              }
            ]
          },
          "initiator_msg": {
            "description": "Message sent by the initaitor. This _must_ be base64 encoded or execution will fail.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "result": {
            "description": "Data from the host chain.",
            "allOf": [
              {
                "$ref": "#/definitions/Callback"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CallbackRequest": {
        "description": "A request for a callback.",
        "type": "object",
        "required": [
          "headstash_digits",
          "msg",
          "receiver"
        ],
        "properties": {
          "headstash_digits": {
            "description": "unique identifier for effecient idenification of headstash callback msg",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "receiver": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CosmosMsg_for_Empty": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/definitions/BankMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "$ref": "#/definitions/StakingMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "distribution"
            ],
            "properties": {
              "distribution": {
                "$ref": "#/definitions/DistributionMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
            "deprecated": true,
            "type": "object",
            "required": [
              "stargate"
            ],
            "properties": {
              "stargate": {
                "type": "object",
                "required": [
                  "type_url",
                  "value"
                ],
                "properties": {
                  "type_url": {
                    "type": "string"
                  },
                  "value": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ibc"
            ],
            "properties": {
              "ibc": {
                "$ref": "#/definitions/IbcMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "wasm"
            ],
            "properties": {
              "wasm": {
                "$ref": "#/definitions/WasmMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "gov"
            ],
            "properties": {
              "gov": {
                "$ref": "#/definitions/GovMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DistributionMsg": {
        "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "set_withdraw_address"
            ],
            "properties": {
              "set_withdraw_address": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "description": "The `withdraw_address`",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "withdraw_delegator_reward"
            ],
            "properties": {
              "withdraw_delegator_reward": {
                "type": "object",
                "required": [
                  "validator"
                ],
                "properties": {
                  "validator": {
                    "description": "The `validator_address`",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [[MsgFundCommunityPool](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#LL69C1-L76C2). `depositor` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "fund_community_pool"
            ],
            "properties": {
              "fund_community_pool": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "description": "The amount to spend",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "DistributionQuery": {
        "oneOf": [
          {
            "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L222-L230>",
            "type": "object",
            "required": [
              "delegator_withdraw_address"
            ],
            "properties": {
              "delegator_withdraw_address": {
                "type": "object",
                "required": [
                  "delegator_address"
                ],
                "properties": {
                  "delegator_address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L157-L167>",
            "type": "object",
            "required": [
              "delegation_rewards"
            ],
            "properties": {
              "delegation_rewards": {
                "type": "object",
                "required": [
                  "delegator_address",
                  "validator_address"
                ],
                "properties": {
                  "delegator_address": {
                    "type": "string"
                  },
                  "validator_address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L180-L187>",
            "type": "object",
            "required": [
              "delegation_total_rewards"
            ],
            "properties": {
              "delegation_total_rewards": {
                "type": "object",
                "required": [
                  "delegator_address"
                ],
                "properties": {
                  "delegator_address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "See <https://github.com/cosmos/cosmos-sdk/blob/b0acf60e6c39f7ab023841841fc0b751a12c13ff/proto/cosmos/distribution/v1beta1/query.proto#L202-L210>",
            "type": "object",
            "required": [
              "delegator_validators"
            ],
            "properties": {
              "delegator_validators": {
                "type": "object",
                "required": [
                  "delegator_address"
                ],
                "properties": {
                  "delegator_address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressible in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object",
        "additionalProperties": false
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "message_index"
        ],
        "properties": {
          "error": {
            "description": "The error that occured executing the message.",
            "type": "string"
          },
          "message_index": {
            "description": "The index of the first message who's execution failed.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Event": {
        "description": "A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]), which then get magically converted to bytes for Tendermint somewhere between the Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/main/learn/advanced/events [*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70",
        "type": "object",
        "required": [
          "attributes",
          "type"
        ],
        "properties": {
          "attributes": {
            "description": "The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/main/learn/advanced/events",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "type": {
            "description": "The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ExecutionResponse": {
        "type": "object",
        "required": [
          "executed_by",
          "result"
        ],
        "properties": {
          "executed_by": {
            "description": "The address on the remote chain that executed the messages.",
            "type": "string"
          },
          "result": {
            "description": "Index `i` corresponds to the result of executing the `i`th message.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubMsgResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GovMsg": {
        "description": "This message type allows the contract interact with the [x/gov] module in order to cast votes.\n\n[x/gov]: https://github.com/cosmos/cosmos-sdk/tree/v0.45.12/x/gov\n\n## Examples\n\nCast a simple vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); use cosmwasm_std::{GovMsg, VoteOption};\n\n#[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::Vote { proposal_id: 4, option: VoteOption::Yes, })) } ```\n\nCast a weighted vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); # #[cfg(feature = \"cosmwasm_1_2\")] use cosmwasm_std::{Decimal, GovMsg, VoteOption, WeightedVoteOption};\n\n# #[cfg(feature = \"cosmwasm_1_2\")] #[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::VoteWeighted { proposal_id: 4, options: vec![ WeightedVoteOption { option: VoteOption::Yes, weight: Decimal::percent(65), }, WeightedVoteOption { option: VoteOption::Abstain, weight: Decimal::percent(35), }, ], })) } ```",
        "oneOf": [
          {
            "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
            "type": "object",
            "required": [
              "vote"
            ],
            "properties": {
              "vote": {
                "type": "object",
                "required": [
                  "option",
                  "proposal_id"
                ],
                "properties": {
                  "option": {
                    "description": "The vote option.\n\nThis used to be called \"vote\", but was changed for consistency with Cosmos SDK.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/VoteOption"
                      }
                    ]
                  },
                  "proposal_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This maps directly to [MsgVoteWeighted](https://github.com/cosmos/cosmos-sdk/blob/v0.45.8/proto/cosmos/gov/v1beta1/tx.proto#L66-L78) in the Cosmos SDK with voter set to the contract address.",
            "type": "object",
            "required": [
              "vote_weighted"
            ],
            "properties": {
              "vote_weighted": {
                "type": "object",
                "required": [
                  "options",
                  "proposal_id"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/WeightedVoteOption"
                    }
                  },
                  "proposal_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Headstash": {
        "type": "object",
        "required": [
          "pubkey",
          "snips"
        ],
        "properties": {
          "pubkey": {
            "type": "string"
          },
          "snips": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Snip"
            }
          }
        },
        "additionalProperties": false
      },
      "HeadstashCallback": {
        "description": "Objects used to specify how to parse SubMsgResponses of successful cross chain calls.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "uploaded_headstash_code_id"
            ],
            "properties": {
              "uploaded_headstash_code_id": {
                "type": "object",
                "required": [
                  "code_id"
                ],
                "properties": {
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "created_headstash_contract_addr"
            ],
            "properties": {
              "created_headstash_contract_addr": {
                "type": "object",
                "required": [
                  "addr"
                ],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "created_snip20_contract_addr"
            ],
            "properties": {
              "created_snip20_contract_addr": {
                "type": "object",
                "required": [
                  "addr"
                ],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "configured_snip120u_minter"
            ],
            "properties": {
              "configured_snip120u_minter": {
                "type": "object",
                "required": [
                  "minter"
                ],
                "properties": {
                  "minter": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "added_headstashes"
            ],
            "properties": {
              "added_headstashes": {
                "type": "object",
                "required": [
                  "headstashers"
                ],
                "properties": {
                  "headstashers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Headstash"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "authorize_fee_grants"
            ],
            "properties": {
              "authorize_fee_grants": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "authz_deployer"
            ],
            "properties": {
              "authz_deployer": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "funded_headstash"
            ],
            "properties": {
              "funded_headstash": {
                "type": "object",
                "required": [
                  "coins"
                ],
                "properties": {
                  "coins": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "generic_msg"
            ],
            "properties": {
              "generic_msg": {
                "type": "object",
                "required": [
                  "msgs"
                ],
                "properties": {
                  "msgs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CosmosMsg_for_Empty"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HeadstashNote": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "upload_headstash_on_secret"
            ],
            "properties": {
              "upload_headstash_on_secret": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "create_snips"
            ],
            "properties": {
              "create_snips": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "create_headstash"
            ],
            "properties": {
              "create_headstash": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "configure_snip120u_minter"
            ],
            "properties": {
              "configure_snip120u_minter": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "add_headstashes"
            ],
            "properties": {
              "add_headstashes": {
                "type": "object",
                "required": [
                  "to_add"
                ],
                "properties": {
                  "to_add": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Headstash"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "authorize_fee_grants"
            ],
            "properties": {
              "authorize_fee_grants": {
                "type": "object",
                "required": [
                  "to_grant"
                ],
                "properties": {
                  "owner": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "to_grant": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "authz_deployer"
            ],
            "properties": {
              "authz_deployer": {
                "type": "object",
                "required": [
                  "grantee"
                ],
                "properties": {
                  "grantee": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "fund_headstash"
            ],
            "properties": {
              "fund_headstash": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Generic action on destination chain. Will trigger default polytone workflow.",
            "type": "object",
            "required": [
              "generic_msg"
            ],
            "properties": {
              "generic_msg": {
                "type": "object",
                "required": [
                  "msgs"
                ],
                "properties": {
                  "msgs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CosmosMsg_for_Empty"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcMsg": {
        "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
        "oneOf": [
          {
            "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
            "type": "object",
            "required": [
              "transfer"
            ],
            "properties": {
              "transfer": {
                "type": "object",
                "required": [
                  "amount",
                  "channel_id",
                  "timeout",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Coin"
                      }
                    ]
                  },
                  "channel_id": {
                    "description": "existing channel to send the tokens over",
                    "type": "string"
                  },
                  "memo": {
                    "description": "An optional memo. See the blog post [\"Moving Beyond Simple Token Transfers\"](https://medium.com/the-interchain-foundation/moving-beyond-simple-token-transfers-d42b2b1dc29b) for more information.\n\nThere is no difference between setting this to `None` or an empty string.\n\nThis field is only supported on chains with CosmWasm >= 2.0 and silently ignored on older chains. If you need support for both 1.x and 2.x chain with the same codebase, it is recommended to use `CosmosMsg::Stargate` with a custom MsgTransfer protobuf encoder instead.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "timeout": {
                    "description": "when packet times out, measured on remote chain",
                    "allOf": [
                      {
                        "$ref": "#/definitions/IbcTimeout"
                      }
                    ]
                  },
                  "to_address": {
                    "description": "address on the remote chain to receive these tokens",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
            "type": "object",
            "required": [
              "send_packet"
            ],
            "properties": {
              "send_packet": {
                "type": "object",
                "required": [
                  "channel_id",
                  "data",
                  "timeout"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  },
                  "data": {
                    "$ref": "#/definitions/Binary"
                  },
                  "timeout": {
                    "description": "when packet times out, measured on remote chain",
                    "allOf": [
                      {
                        "$ref": "#/definitions/IbcTimeout"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
            "type": "object",
            "required": [
              "close_channel"
            ],
            "properties": {
              "close_channel": {
                "type": "object",
                "required": [
                  "channel_id"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcQuery": {
        "description": "These are queries to the various IBC modules to see the state of the contract's IBC connection. Most of these will return errors if the contract is not \"ibc enabled\".",
        "oneOf": [
          {
            "description": "Gets the Port ID the current contract is bound to.\n\nReturns a `PortIdResponse`.",
            "type": "object",
            "required": [
              "port_id"
            ],
            "properties": {
              "port_id": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Lists all channels that are bound to a given port. If `port_id` is omitted, this list all channels bound to the contract's port.\n\nReturns a `ListChannelsResponse`.",
            "deprecated": true,
            "type": "object",
            "required": [
              "list_channels"
            ],
            "properties": {
              "list_channels": {
                "type": "object",
                "properties": {
                  "port_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Lists all information for a (portID, channelID) pair. If port_id is omitted, it will default to the contract's own channel. (To save a PortId{} call)\n\nReturns a `ChannelResponse`.",
            "type": "object",
            "required": [
              "channel"
            ],
            "properties": {
              "channel": {
                "type": "object",
                "required": [
                  "channel_id"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  },
                  "port_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcTimeout": {
        "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
        "type": "object",
        "properties": {
          "block": {
            "anyOf": [
              {
                "$ref": "#/definitions/IbcTimeoutBlock"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp": {
            "anyOf": [
              {
                "$ref": "#/definitions/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "IbcTimeoutBlock": {
        "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
        "type": "object",
        "required": [
          "height",
          "revision"
        ],
        "properties": {
          "height": {
            "description": "block height after which the packet times out. the height within the given revision",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "revision": {
            "description": "the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "MsgResponse": {
        "type": "object",
        "required": [
          "type_url",
          "value"
        ],
        "properties": {
          "type_url": {
            "type": "string"
          },
          "value": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "PageRequest": {
        "description": "Simplified version of the PageRequest type for pagination from the cosmos-sdk",
        "type": "object",
        "required": [
          "limit",
          "reverse"
        ],
        "properties": {
          "key": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "reverse": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "QueryRequest_for_Empty": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/definitions/BankQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "$ref": "#/definitions/StakingQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "distribution"
            ],
            "properties": {
              "distribution": {
                "$ref": "#/definitions/DistributionQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A Stargate query is encoded the same way as abci_query, with path and protobuf encoded request data. The format is defined in [ADR-21](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-021-protobuf-query-encoding.md). The response is protobuf encoded data directly without a JSON response wrapper. The caller is responsible for compiling the proper protobuf definitions for both requests and responses.",
            "deprecated": true,
            "type": "object",
            "required": [
              "stargate"
            ],
            "properties": {
              "stargate": {
                "type": "object",
                "required": [
                  "data",
                  "path"
                ],
                "properties": {
                  "data": {
                    "description": "this is the expected protobuf message type (not any), binary encoded",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "path": {
                    "description": "this is the fully qualified service path used for routing, eg. \"/cosmos_sdk.x.bank.v1.Query/QueryBalance\"",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ibc"
            ],
            "properties": {
              "ibc": {
                "$ref": "#/definitions/IbcQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "wasm"
            ],
            "properties": {
              "wasm": {
                "$ref": "#/definitions/WasmQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Result_of_Array_of_Binary_or_ErrorResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Binary"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Result_of_ExecutionResponse_or_String": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "$ref": "#/definitions/ExecutionResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Snip": {
        "type": "object",
        "required": [
          "addr",
          "amount"
        ],
        "properties": {
          "addr": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "StakingMsg": {
        "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "delegate"
            ],
            "properties": {
              "delegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "undelegate"
            ],
            "properties": {
              "undelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "redelegate"
            ],
            "properties": {
              "redelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "dst_validator",
                  "src_validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "dst_validator": {
                    "type": "string"
                  },
                  "src_validator": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "StakingQuery": {
        "oneOf": [
          {
            "description": "Returns the denomination that can be bonded (if there are multiple native tokens on the chain)",
            "type": "object",
            "required": [
              "bonded_denom"
            ],
            "properties": {
              "bonded_denom": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AllDelegations will return all delegations by the delegator",
            "type": "object",
            "required": [
              "all_delegations"
            ],
            "properties": {
              "all_delegations": {
                "type": "object",
                "required": [
                  "delegator"
                ],
                "properties": {
                  "delegator": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Delegation will return more detailed info on a particular delegation, defined by delegator/validator pair",
            "type": "object",
            "required": [
              "delegation"
            ],
            "properties": {
              "delegation": {
                "type": "object",
                "required": [
                  "delegator",
                  "validator"
                ],
                "properties": {
                  "delegator": {
                    "type": "string"
                  },
                  "validator": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns all validators in the currently active validator set.\n\nThe query response type is `AllValidatorsResponse`.",
            "type": "object",
            "required": [
              "all_validators"
            ],
            "properties": {
              "all_validators": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns the validator at the given address. Returns None if the validator is not part of the currently active validator set.\n\nThe query response type is `ValidatorResponse`.",
            "type": "object",
            "required": [
              "validator"
            ],
            "properties": {
              "validator": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "description": "The validator's address (e.g. (e.g. cosmosvaloper1...))",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SubMsgResponse": {
        "description": "The information we get back from a successful sub message execution, with full Cosmos SDK events.",
        "type": "object",
        "required": [
          "events"
        ],
        "properties": {
          "data": {
            "deprecated": true,
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Event"
            }
          },
          "msg_responses": {
            "description": "The responses from the messages emitted by the submessage. In most cases, this is equivalent to the Cosmos SDK's [MsgResponses], which usually contains a [single message]. However, wasmd allows chains to translate a single contract message into multiple SDK messages. In that case all the MsgResponses from each are concatenated into this flattened `Vec`.\n\n[MsgResponses]: https://github.com/cosmos/cosmos-sdk/blob/316750cc8cd8b3296fa233f4da2e39cbcdc34517/proto/cosmos/base/abci/v1beta1/abci.proto#L106-L109 [single message]: https://github.com/cosmos/cosmos-sdk/blob/v0.50.4/baseapp/baseapp.go#L1020-L1023",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/definitions/MsgResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "VoteOption": {
        "type": "string",
        "enum": [
          "yes",
          "no",
          "abstain",
          "no_with_veto"
        ]
      },
      "WasmMsg": {
        "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
        "oneOf": [
          {
            "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "funds",
                  "msg"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "msg": {
                    "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "instantiate"
            ],
            "properties": {
              "instantiate": {
                "type": "object",
                "required": [
                  "code_id",
                  "funds",
                  "label",
                  "msg"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "label": {
                    "description": "A human-readable label for the contract.\n\nValid values should: - not be empty - not be bigger than 128 bytes (or some chain-specific limit) - not start / end with whitespace",
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Instantiates a new contracts from previously uploaded Wasm code using a predictable address derivation algorithm implemented in [`cosmwasm_std::instantiate2_address`].\n\nThis is translated to a [MsgInstantiateContract2](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L73-L96). `sender` is automatically filled with the current contract's address. `fix_msg` is automatically set to false.",
            "type": "object",
            "required": [
              "instantiate2"
            ],
            "properties": {
              "instantiate2": {
                "type": "object",
                "required": [
                  "code_id",
                  "funds",
                  "label",
                  "msg",
                  "salt"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "label": {
                    "description": "A human-readable label for the contract.\n\nValid values should: - not be empty - not be bigger than 128 bytes (or some chain-specific limit) - not start / end with whitespace",
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "salt": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "migrate"
            ],
            "properties": {
              "migrate": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "msg",
                  "new_code_id"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "new_code_id": {
                    "description": "the code_id of the new logic to place in the given contract",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "update_admin"
            ],
            "properties": {
              "update_admin": {
                "type": "object",
                "required": [
                  "admin",
                  "contract_addr"
                ],
                "properties": {
                  "admin": {
                    "type": "string"
                  },
                  "contract_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "clear_admin"
            ],
            "properties": {
              "clear_admin": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WasmQuery": {
        "oneOf": [
          {
            "description": "this queries the public API of another contract at a known address (with known ABI) Return value is whatever the contract returns (caller should know), wrapped in a ContractResult that is JSON encoded.",
            "type": "object",
            "required": [
              "smart"
            ],
            "properties": {
              "smart": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "msg"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the json-encoded QueryMsg struct",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "this queries the raw kv-store of the contract. returns the raw, unparsed data stored at that key, which may be an empty vector if not present",
            "type": "object",
            "required": [
              "raw"
            ],
            "properties": {
              "raw": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "key"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the raw key used in the contracts Storage",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns a [`ContractInfoResponse`] with metadata on the contract from the runtime",
            "type": "object",
            "required": [
              "contract_info"
            ],
            "properties": {
              "contract_info": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns a [`CodeInfoResponse`] with metadata of the code",
            "type": "object",
            "required": [
              "code_info"
            ],
            "properties": {
              "code_info": {
                "type": "object",
                "required": [
                  "code_id"
                ],
                "properties": {
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WeightedVoteOption": {
        "type": "object",
        "required": [
          "option",
          "weight"
        ],
        "properties": {
          "option": {
            "$ref": "#/definitions/VoteOption"
          },
          "weight": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "This channel this note is currently connected to, or none if no channel is connected.",
        "type": "string",
        "enum": [
          "active_channel"
        ]
      },
      {
        "description": "The contract's corresponding voice on a remote chain.",
        "type": "string",
        "enum": [
          "pair"
        ]
      },
      {
        "description": "Returns the remote address for the provided local address. If no account exists, returns `None`. An account can be created by calling `ExecuteMsg::Execute` with the sender being `local_address`.",
        "type": "object",
        "required": [
          "remote_address"
        ],
        "properties": {
          "remote_address": {
            "type": "object",
            "required": [
              "local_address"
            ],
            "properties": {
              "local_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Currently set gas limit",
        "type": "string",
        "enum": [
          "block_max_gas"
        ]
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "active_channel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    },
    "block_max_gas": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint64",
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "pair": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Pair",
      "anyOf": [
        {
          "$ref": "#/definitions/Pair"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Pair": {
          "description": "This contract's voice. There is one voice per note, and many notes per voice.",
          "type": "object",
          "required": [
            "connection_id",
            "remote_port"
          ],
          "properties": {
            "connection_id": {
              "type": "string"
            },
            "remote_port": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "remote_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    }
  }
}
